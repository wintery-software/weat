/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  readonly "/": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Root
     * @description Root endpoint for health check.
     */
    readonly get: operations["root__get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/health": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Health Check
     * @description Health check endpoint.
     */
    readonly get: operations["health_check_health_get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/restaurants/": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** List Restaurant */
    readonly get: operations["list_restaurant_restaurants__get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly [path: `/restaurants/${string}`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** Get Restaurant */
    readonly get: operations["get_restaurant_restaurants__restaurant_id__get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    /** Update Restaurant */
    readonly patch: operations["update_restaurant_restaurants__restaurant_id__patch"];
    readonly trace?: never;
  };
  readonly [path: `/restaurants/${string}/block`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Block Restaurant */
    readonly post: operations["block_restaurant_restaurants__restaurant_id__block_post"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/restaurants/count": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** Count Restaurants */
    readonly get: operations["count_restaurants_restaurants_count_get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly [path: `/reviews/${string}/block`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Block Review */
    readonly post: operations["block_review_reviews__review_id__block_post"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/tag-clusters/": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** List Tag Clusters */
    readonly get: operations["list_tag_clusters_tag_clusters__get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly [path: `/tag-clusters/${string}`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    /** Update Tag Cluster */
    readonly patch: operations["update_tag_cluster_tag_clusters__tag_cluster_id__patch"];
    readonly trace?: never;
  };
  readonly [path: `/tag-clusters/${string}/add-tags`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Add Tags To Cluster */
    readonly post: operations["add_tags_to_cluster_tag_clusters__tag_cluster_id__add_tags_post"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly [path: `/tag-clusters/${string}/suggest-tags`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Suggest Tags */
    readonly post: operations["suggest_tags_tag_clusters__tag_cluster_id__suggest_tags_post"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly [path: `/tags/${string}/block`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Block Tag */
    readonly post: operations["block_tag_tags__tag_id__block_post"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/tags/count": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** Count Tags */
    readonly get: operations["count_tags_tags_count_get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/tasks/count/status": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** Count Tasks By Status */
    readonly get: operations["count_tasks_by_status_tasks_count_status_get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/tasks/count/type": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** Count Tasks By Type */
    readonly get: operations["count_tasks_by_type_tasks_count_type_get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/tasks/run": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Run Tasks */
    readonly post: operations["run_tasks_tasks_run_post"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/tasks/schedule": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Schedule Tasks */
    readonly post: operations["schedule_tasks_tasks_schedule_post"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/verifications/": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** Get Pending Verifications */
    readonly get: operations["get_pending_verifications_verifications__get"];
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly [path: `/verifications/${string}/resolve`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Resolve Verification */
    readonly post: operations["resolve_verification_verifications__verification_id__resolve_post"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /** AddTagsToClusterRequest */
    readonly AddTagsToClusterRequest: {
      /**
       * Tag Ids
       * @description The IDs of the tags to add to the cluster.
       */
      readonly tag_ids: readonly string[];
    };
    /** CountRestaurantsResponse */
    readonly CountRestaurantsResponse: {
      /**
       * All
       * @description The total number of restaurants.
       */
      readonly all: number;
      /**
       * Blocked
       * @description The number of blocked restaurants.
       */
      readonly blocked: number;
      /**
       * Summarized
       * @description The number of restaurants with summaries.
       */
      readonly summarized: number;
      /**
       * Tagged
       * @description The number of restaurants with tags.
       */
      readonly tagged: number;
    };
    /** CountTagsResponse */
    readonly CountTagsResponse: {
      /**
       * All
       * @description The total number of tags.
       */
      readonly all: number;
      /**
       * Blocked
       * @description The number of blocked tags.
       */
      readonly blocked: number;
    };
    /** CountTasksByStatusResponse */
    readonly CountTasksByStatusResponse: {
      readonly [key: string]: number;
    };
    /** CountTasksByTypeResponse */
    readonly CountTasksByTypeResponse: {
      readonly [key: string]: number;
    };
    /** GetRestaurantResponse */
    readonly GetRestaurantResponse: {
      /**
       * Created At
       * Format: date-time
       * @description The created time of the restaurant.
       */
      readonly created_at: string;
      /**
       * External Links
       * @description The external links of the restaurant.
       */
      readonly external_links: {
        readonly [key: string]: unknown;
      } | null;
      /**
       * Id
       * Format: uuid
       * @description The id of the restaurant.
       */
      readonly id: string;
      /**
       * Name En
       * @description The English name of the restaurant.
       */
      readonly name_en: string | null;
      /**
       * Name Zh
       * @description The Chinese name of the restaurant.
       */
      readonly name_zh: string | null;
      /**
       * Phone Number
       * @description The phone number of the restaurant.
       */
      readonly phone_number: string | null;
      /** @description The place of the restaurant. */
      readonly place: components["schemas"]["Place"];
      /**
       * Updated At
       * Format: date-time
       * @description The updated time of the restaurant.
       */
      readonly updated_at: string;
    };
    /** HTTPValidationError */
    readonly HTTPValidationError: {
      /** Detail */
      readonly detail: readonly components["schemas"]["ValidationError"][];
    };
    /** ListRestaurantResponse */
    readonly ListRestaurantResponse: {
      /**
       * Count
       * @description The number of restaurants.
       */
      readonly count: number;
      /**
       * Data
       * @description The list of restaurants.
       */
      readonly data: readonly components["schemas"]["Restaurant"][];
      /**
       * Page
       * @description The page number.
       */
      readonly page: number;
      /**
       * Page Size
       * @description The number of restaurants per page.
       */
      readonly page_size: number;
      /**
       * Total Pages
       * @description The total number of pages.
       */
      readonly total_pages: number;
    };
    /** Place */
    readonly Place: {
      /**
       * Address 1
       * @description The first line of the address.
       */
      readonly address_1: string;
      /**
       * Address 2
       * @description The second line of the address.
       */
      readonly address_2: string | null;
      /**
       * City
       * @description The city of the address.
       */
      readonly city: string;
      /**
       * Distance
       * @description The distance of the address.
       */
      readonly distance?: number | null;
      /**
       * Google Maps Place Id
       * @description The Google Maps place id.
       */
      readonly google_maps_place_id: string;
      /**
       * Latitude
       * @description The latitude of the address.
       */
      readonly latitude: number;
      /**
       * Longitude
       * @description The longitude of the address.
       */
      readonly longitude: number;
      /**
       * State
       * @description The state of the address.
       */
      readonly state: string;
      /**
       * Zip Code
       * @description The zip code of the address.
       */
      readonly zip_code: string;
    };
    /** Restaurant */
    readonly Restaurant: {
      /**
       * Created At
       * Format: date-time
       * @description The created time of the restaurant.
       */
      readonly created_at: string;
      /**
       * External Links
       * @description The external links of the restaurant.
       */
      readonly external_links: {
        readonly [key: string]: unknown;
      } | null;
      /**
       * Id
       * Format: uuid
       * @description The id of the restaurant.
       */
      readonly id: string;
      /**
       * Name En
       * @description The English name of the restaurant.
       */
      readonly name_en: string | null;
      /**
       * Name Zh
       * @description The Chinese name of the restaurant.
       */
      readonly name_zh: string | null;
      /**
       * Phone Number
       * @description The phone number of the restaurant.
       */
      readonly phone_number: string | null;
      /** @description The place of the restaurant. */
      readonly place: components["schemas"]["Place"];
      /**
       * Updated At
       * Format: date-time
       * @description The updated time of the restaurant.
       */
      readonly updated_at: string;
    };
    /** RunTasksRequest */
    readonly RunTasksRequest: {
      /**
       * Count
       * @description The number of tasks to run.
       * @default 1
       */
      readonly count: number;
      /** @description The type of the task to run. */
      readonly task_type: components["schemas"]["TaskType"];
    };
    /** RunTasksResponse */
    readonly RunTasksResponse: {
      /**
       * Count
       * @description The number of tasks that are being run.
       */
      readonly count: number;
      /**
       * Task Ids
       * @description The ids of the tasks that are being run.
       */
      readonly task_ids: readonly string[];
    };
    /** ScheduleTasksRequest */
    readonly ScheduleTasksRequest: {
      /**
       * Task Data
       * @description The data for the task to schedule.
       */
      readonly task_data: {
        readonly [key: string]: unknown;
      } | null;
      /** @description The type of the task to schedule. */
      readonly task_type: components["schemas"]["TaskType"];
    };
    /** ScheduleTasksResponse */
    readonly ScheduleTasksResponse: {
      /**
       * Count
       * @description The number of tasks scheduled.
       */
      readonly count: number;
    };
    /** SuggestSimilarTagsRequest */
    readonly SuggestSimilarTagsRequest: {
      /**
       * Tag Ids
       * @description The IDs of the tags that has been selected to be added to the cluster. They are used here to perform similarity search.
       */
      readonly tag_ids: readonly string[];
    };
    /** Tag */
    readonly Tag: {
      /**
       * Cluster Id
       * Format: uuid
       */
      readonly cluster_id: string;
      /**
       * Id
       * Format: uuid
       */
      readonly id: string;
      /**
       * Is Blocked
       * @default false
       */
      readonly is_blocked: boolean;
      /**
       * Name
       * @default
       */
      readonly name: string;
    };
    /**
     * TaskStatus
     * @enum {string}
     */
    readonly TaskStatus: TaskStatus;
    /**
     * TaskType
     * @enum {string}
     */
    readonly TaskType: TaskType;
    /** UpdateRestaurantRequest */
    readonly UpdateRestaurantRequest: {
      /**
       * Name En
       * @description The English name of the restaurant.
       */
      readonly name_en: string | null;
      /**
       * Name Zh
       * @description The Chinese name of the restaurant.
       */
      readonly name_zh: string | null;
    };
    /** UpdateTagClusterRequest */
    readonly UpdateTagClusterRequest: {
      /**
       * Display Name
       * @description The display name of the tag cluster.
       */
      readonly display_name: string | null;
    };
    /** ValidationError */
    readonly ValidationError: {
      /** Location */
      readonly loc: readonly (string | number)[];
      /** Message */
      readonly msg: string;
      /** Error Type */
      readonly type: string;
    };
    /** Verification */
    readonly Verification: {
      /** Comment */
      readonly comment: string | null;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Entity Id
       * Format: uuid
       */
      readonly entity_id: string;
      /** @default RESTAURANT */
      readonly entity_type: components["schemas"]["VerificationEntityType"];
      /**
       * Id
       * Format: uuid
       */
      readonly id: string;
      /** Metadata */
      readonly metadata: {
        readonly [key: string]: unknown;
      } | null;
      /**
       * Reason
       * @default
       */
      readonly reason: string;
      /** @default PENDING */
      readonly status: components["schemas"]["VerificationStatus"];
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Verification Type
       * @default
       */
      readonly verification_type: string;
    };
    /**
     * VerificationEntityType
     * @enum {string}
     */
    readonly VerificationEntityType: VerificationEntityType;
    /**
     * VerificationStatus
     * @enum {string}
     */
    readonly VerificationStatus: VerificationStatus;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export interface operations {
  readonly root__get: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
    };
  };
  readonly health_check_health_get: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
    };
  };
  readonly list_restaurant_restaurants__get: {
    readonly parameters: {
      readonly query?: {
        readonly distance?: number | null;
        readonly lat?: number | null;
        readonly lng?: number | null;
        readonly page?: number | null;
        readonly page_size?: number | null;
        readonly query?: string | null;
        readonly sort_by?: string | null;
        readonly sort_order?: PathsRestaurantsGetParametersQuerySort_order | null;
      };
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["ListRestaurantResponse"];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly get_restaurant_restaurants__restaurant_id__get: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly restaurant_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["GetRestaurantResponse"];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly update_restaurant_restaurants__restaurant_id__patch: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly restaurant_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["UpdateRestaurantRequest"];
      };
    };
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly block_restaurant_restaurants__restaurant_id__block_post: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly restaurant_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly count_restaurants_restaurants_count_get: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["CountRestaurantsResponse"];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly block_review_reviews__review_id__block_post: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly review_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly list_tag_clusters_tag_clusters__get: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly update_tag_cluster_tag_clusters__tag_cluster_id__patch: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly tag_cluster_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["UpdateTagClusterRequest"];
      };
    };
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly add_tags_to_cluster_tag_clusters__tag_cluster_id__add_tags_post: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly tag_cluster_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["AddTagsToClusterRequest"];
      };
    };
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly suggest_tags_tag_clusters__tag_cluster_id__suggest_tags_post: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly tag_cluster_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["SuggestSimilarTagsRequest"];
      };
    };
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": readonly components["schemas"]["Tag"][];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly block_tag_tags__tag_id__block_post: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly tag_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly count_tags_tags_count_get: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["CountTagsResponse"];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly count_tasks_by_status_tasks_count_status_get: {
    readonly parameters: {
      readonly query?: {
        readonly end_date?: string | null;
        readonly start_date?: string | null;
      };
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["CountTasksByStatusResponse"];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly count_tasks_by_type_tasks_count_type_get: {
    readonly parameters: {
      readonly query?: {
        readonly end_date?: string | null;
        readonly start_date?: string | null;
      };
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["CountTasksByTypeResponse"];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly run_tasks_tasks_run_post: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["RunTasksRequest"];
      };
    };
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["RunTasksResponse"];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly schedule_tasks_tasks_schedule_post: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["ScheduleTasksRequest"];
      };
    };
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["ScheduleTasksResponse"];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly get_pending_verifications_verifications__get: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": readonly components["schemas"]["Verification"][];
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  readonly resolve_verification_verifications__verification_id__resolve_post: {
    readonly parameters: {
      readonly query?: never;
      readonly header: {
        readonly "x-api-key": string;
      };
      readonly path: {
        readonly verification_id: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description Successful Response */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": unknown;
        };
      };
      /** @description Validation Error */
      readonly 422: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}

export enum PathsRestaurantsGetParametersQuerySort_order {
  asc = "asc",
  desc = "desc",
}

export enum TaskStatus {
  PENDING = "PENDING",
  STARTED = "STARTED",
  SUCCESS = "SUCCESS",
  FAILURE = "FAILURE",
}

export enum TaskType {
  process_xhs_post = "process_xhs_post",
  crawl_xhs_posts = "crawl_xhs_posts",
}

export enum VerificationEntityType {
  RESTAURANT = "RESTAURANT",
  REVIEW = "REVIEW",
}

export enum VerificationStatus {
  PENDING = "PENDING",
  RESOLVED = "RESOLVED",
}
